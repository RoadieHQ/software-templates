apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: create-tenant
  title: Create Tenant
  description: Send an API call to the tenant manager to create a tenant.
  tags:
    - Roadie

spec:
  owner: group:roadiehq/solutions
  type: Tenant
  parameters:
    - title: Provide some simple information
      required:
        - tenant_name
        - tenant_email_domain
        - admin_email
        - tenant_environment
      properties:
        tenant_name:
          title: Name
          type: string
          description: The name of the tenant, used for the tenant slug.
          ui:autofocus: true
          maxLength: 30
          pattern: '^[a-z][a-z1-9-]*[a-z1-9]+$'
          ui:help: Lowercase characters, dash (-), and underscore (_) only.
        tenant_email_domain:
          title: Email domain
          type: string
          description: The email domain of users who will be allowed to access the tenant.
          pattern: '^[a-zA-Z0-9-]+.[a-zA-Z0-9-]+'
        admin_email:
          title: Admin email
          type: string
          description: The email of the person who will drive the evaluation.
          pattern: '^[a-zA-Z0-9-_.]+@[a-zA-Z0-9-.]+.[a-zA-Z0-9-]+$'
        tenant_environment:
          title: Environment
          type: string
          default: dev
          enum: ['dev', 'prod']
        createSlack:
          title: Create Slack Channel?
          type: boolean
          default: false
          ui:widget: radio
        tenant_type:
          title: Tenant Type
          type: string
          description: The type will be used to tag the tenant in the catalog (Other is not tagged).
          default: pov
          enum: ['internal', 'pov', 'vendor', 'other']
            
  steps:
    - id: createDevTenant
      name: Is it a Dev Tenant?
      if: ${{parameters.tenant_environment === 'dev'}}
      action: http:backstage:request
      input:
        method: 'POST'
        path: proxy/tenant-manager-dev/api/tenant
        body: |
              {
                "tenantName": "${{ parameters.tenant_name }}",
                "tenantEmailDomain": "${{ parameters.tenant_email_domain }}",
                "adminEmail": "${{ parameters.admin_email }}",
                "tenantEnvironment": "dev",
                "skipFailures": false
              }

    - id: createProdTenant
      name: Is it a Prod Tenant?
      if: ${{parameters.tenant_environment === 'prod'}}
      action: http:backstage:request
      input:
        method: 'POST'
        path: proxy/tenant-manager/api/tenant
        body: |
              {
                "tenantName": "${{ parameters.tenant_name }}",
                "tenantEmailDomain": "${{ parameters.tenant_email_domain }}",
                "adminEmail": "${{ parameters.admin_email }}",
                "tenantEnvironment": "prod",
                "skipFailures": false
              }

    - id: addTags
      name: Tag with Tenant Type?
      if: ${{parameters.tenant_type !== 'other'}}
      action: http:backstage:request
      input:
        method: 'POST'
        path: proxy/fragments
        body: |
              {
                "decorator": {
                  "entityRef": "resource:default/${{ parameters.tenant_name }}",
                  "fragment": {
                    "metadata": {
                      "tags": [
                        "${{ parameters.tenant_type }}"
                      ]
                    }
                  }
                }
              }         
    - id: log-result
      action: debug:log
      name: Log Entity chosen
      input:
        message: ${{ parameters.tenant_name }} created by ${{ user.ref }}

  output:
    resp: ${{ parameters.tenant_name }} created by ${{ user.ref }}
